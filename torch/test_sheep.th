require 'image'
npy4th = require 'npy4th'
require 'data_sheep_human_opt';
require 'cunn'
require 'cudnn'
require 'nn';
require 'optim'
require 'stn'
npy4th=require 'npy4th';
require 'torchx';
require 'gnuplot';
dump=require 'dump';
tps_helper=require 'tps_helper';
visualize=require 'visualize';
loss_helper=require 'loss_helper';
forward_helper=require 'forward_helper';

function test(params)
    if params.limit<0 then
        params.limit=nil;
    end
    local val_data_path= params.val_data_path
    
    local out_dir_images=params.out_dir_images;
    paths.mkdir(out_dir_images);
    local out_file_loss_val=paths.concat(out_dir_images,'loss_final_val.npy');
    local out_file_loss_val_ind=paths.concat(out_dir_images,'loss_final_val_ind.npy');
    local out_file_log=paths.concat(out_dir_images,'log_test.txt');
    local logger=torch.DiskFile(out_file_log,'w');
    
    logger:writeString(dump.tostring(params)..'\n');
    print (params);

    cutorch.setDevice(params.gpu);
    logger:writeString(dump.tostring('loading network')..'\n');
    print ('loading network');

    local net=torch.load(params.model_path);
    
    logger:writeString(dump.tostring('done loading network')..'\n');
    print ('done loading network');
    print (net);

    logger:writeString(dump.tostring('moving to GPU')..'\n');
    print ('moving to GPU');
    
    local net = net:cuda();
    net:evaluate();

    logger:writeString(dump.tostring('done')..'\n');
    print ('done');

    local data_params;
    local mean_im;
    local std_im;
    if params.soumith then
        data_params={file_path=val_data_path,
                        batch_size=params.batchSize,
                        mean_file=params.soumith_mean_file,
                        std_file=params.soumith_mean_file,
                        augmentation=false,
                        limit=params.limit,
                        input_size={224,224},
                        imagenet_mean=false,
                        soumith=params.soumith};
        mean_im=image.load(params.mean_im_path)*255;
        std_im=image.load(params.std_im_path)*255;
    else
        -- data_params={file_path=val_data_path,
        --                 batch_size=params.batchSize,
        --                 mean_file=params.mean_im_path,
        --                 std_file=params.std_im_path,
        --                 augmentation=false,
        --                 limit=params.limit,
        --                 input_size={224,224},
        --                 imagenet_mean=true,
        --                 bgr=params.bgr,
        --                 num_key_points=params.num_key_points};

        -- if params.face then
        --     if params.bgr then
        --         data_params.bgr=true;   
        --     else
        --         data_params.imagenet_mean=false;
        --     end
        -- end

        data_params={file_path_horse=params.horse_data_path,
                            file_path_human=params.human_data_path,
                            batch_size=params.batchSize,
                            mean_file=params.mean_im_path,
                            std_file=params.std_im_path,
                            augmentation=false,
                            limit=params.limit,
                            input_size={224,224},
                            bgr=params.bgr,
                            num_key_points=params.num_key_points,
                            optimize=true};
                            
        -- td=data_animal_human(data_params);

    end


    
    local td=data_animal_human(data_params);


    local val_losses = {};
    local val_losses_iter = {};

    local val_losses_ind={};

    for i=1,params.iterations do

            td:getTrainingData();

            td.training_set_horse.data=td.training_set_horse.data:cuda();
            td.training_set_horse.label=td.training_set_horse.label:cuda();

            local batch_inputs=td.training_set_horse.data;
            local batch_targets=td.training_set_horse.label;

            local loss,loss_all;
            local saveImage=paths.concat(out_dir_images,i..'_')
            local colors={{0,255,0}};
            local pointSize=10;

            -- local binary=batch_targets[{{},{},3}]:clone();
            -- local batch_inputs_view=batch_inputs:double():clone();
            -- local imagenet_mean=td.params.imagenet_mean
            -- visualize:saveBatchImagesWithKeypointsSensitive(batch_inputs_view,batch_targets[{{},{},{1,2}}]:transpose(2,3),{saveImage,'_gt.jpg'},imagenet_mean,{-1,1},colors,pointSize,binary,td.bgr);

            if params.face then
                print 'nowarp';
                loss, loss_all = forward_helper:forward_noWarp(td,net,batch_inputs,batch_targets,saveImage,true);
            elseif params.soumith then
                print 'soumith locnet';
                loss, loss_all = forward_helper:forward(td,net,batch_inputs,batch_targets,saveImage,true,mean_im,std_im);
            else
                loss,loss_all = forward_helper:forward(td,net,batch_inputs,batch_targets,saveImage,true)
            end

            for idx_ind=1,loss_all:size(1) do
                val_losses_ind[#val_losses_ind+1]=loss_all[idx_ind];
            end
            
            val_losses[#val_losses+1]=loss;
            val_losses_iter[#val_losses_iter+1]=i;

            disp_str=string.format("minibatches processed: %6s, val loss = %6.6f", i, val_losses[#val_losses])
            logger:writeString(dump.tostring(disp_str)..'\n');
            print(disp_str)

    end

    val_losses_ind=torch.Tensor(val_losses_ind);
    print (val_losses_ind:size())
    
    if val_losses_ind:size(1)>#td.lines_horse then
        val_losses_ind=val_losses_ind[{{1,#td.lines_horse}}];
    end
    
    print (val_losses_ind:size())
    
    print (params.model_path);
    
    disp_str=string.format("minibatches processed: all, val loss = %6.6f", torch.mean(val_losses_ind))
    logger:writeString(dump.tostring(disp_str)..'\n');
    
    print(disp_str)

    npy4th.savenpy(out_file_loss_val, torch.Tensor(val_losses))
    npy4th.savenpy(out_file_loss_val_ind, val_losses_ind)

    local python_exec_string = {};
    python_exec_string[#python_exec_string+1]='python ../python/visualize_results.py';
    python_exec_string[#python_exec_string+1]='--test_dir';
    python_exec_string[#python_exec_string+1]=params.out_dir_images;
    python_exec_string[#python_exec_string+1]='--test_file';
    python_exec_string[#python_exec_string+1]=params.val_data_path;
    python_exec_string[#python_exec_string+1]='--batchSize';
    python_exec_string[#python_exec_string+1]=params.batchSize;
    python_exec_string[#python_exec_string+1]='--iterations';
    python_exec_string[#python_exec_string+1]=params.iterations;
    python_exec_string[#python_exec_string+1]='--justHTML'
    local py_str='';
    for str_num=1,#python_exec_string do
        py_str=py_str..python_exec_string[str_num]..' ';
    end

    print (py_str);
    os.execute(py_str)
    -- py.exec(py_str);
end

cmd = torch.CmdLine()
cmd:text()
cmd:text('Test Full network')
cmd:text()
cmd:text('Options')
cmd:option('-mean_im_path','../data/aflw_cvpr_224_mean.png','mean image for image preprocessing for keypoint network training');
cmd:option('-std_im_path','../data/aflw_cvpr_224_std.png','std image for image preprocessing for keypoint network training');
cmd:option('-limit',-1,'num of test data to read. negative means all');

cmd:option('-val_data_path','../data/sheep_for_eight/matches_5_sheep_test_allKP_minloss_8.txt','validation data file path');

cmd:option('-horse_data_path','../data/sheep_for_eight/matches_5_sheep_test_allKP_minloss_8.txt','animal training data file path');
cmd:option('-human_data_path','../experiments/data_check/aflw/matches_5_sheep_test_allKP_noIm_minloss.txt','human training data file path');


cmd:option('-num_key_points',8);
-- cmd:option('-model_path','../experiments/all_sheep_models/sheep/full_model/final/model_all_final.dat');
cmd:option('-model_path','../models/pretrained_sheep_full_8.dat');
cmd:option('-out_dir_images','../experiments/eight_point_experiments/debug_sheep_viz');
cmd:option('-gpu',1,'gpu to run the training on');
cmd:option('-bgr',true);
cmd:option('-iterations',2,'num of iterations to run');
cmd:option('-batchSize',50,'batch size');
cmd:option('-face',false,'true if testing a model with no warping network');
cmd:option('-soumith',false,'true if testing a model with no warping network');
cmd:option('-soumith_mean_file','../models/imagenet_soumith/meanstdCache.t7','true if testing a model with no warping network');
params = cmd:parse(arg)
test(params)