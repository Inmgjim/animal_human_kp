require 'image'
npy4th = require 'npy4th'
require 'data_animal';
require 'cunn'
require 'cudnn'
require 'nn';
require 'optim'
require 'stn'
npy4th=require 'npy4th';
require 'torchx';
require 'gnuplot';
dump=require 'dump';
tps_helper=require 'tps_helper';
visualize=require 'visualize';
loss_helper=require 'loss_helper';


function forward_noWarp(td,net,batch_inputs,batch_targets,saveImage)
    local outputs=net:forward(batch_inputs);
    loss,loss_all = loss_helper:getLoss_Euclidean(outputs,batch_targets);
    
    if saveImage then
        local outputs_view=outputs:view(outputs:size(1),outputs:size(2)/2,2):clone();
        local batch_inputs_view=batch_inputs:clone():double();
        batch_inputs_view=tps_helper:unMean(batch_inputs_view,td.mean_im,td.std_im);
        
        for im_num=1,outputs_view:size(1) do 
            local out_file_gt=saveImage..im_num..'_gt_pts.npy';
            local out_file_pred=saveImage..im_num..'_pred_pts.npy';

            local pred_output=outputs_view[im_num]:clone():double();
            local gt_output=batch_targets[im_num]:clone():double();
            npy4th.savenpy(out_file_gt,gt_output);
            npy4th.savenpy(out_file_pred,pred_output);
        end
    
        local binary=batch_targets[{{},{},3}]:clone();
    
        visualize:saveBatchImagesWithKeypointsSensitive(batch_inputs_view,outputs_view:transpose(2,3),{saveImage,'_org.jpg'},nil,{-1,1},colors,pointSize,binary);
    
        visualize:saveBatchImagesWithKeypointsSensitive(batch_inputs_view,batch_targets[{{},{},{1,2}}]:transpose(2,3),{saveImage,'_gt.jpg'},nil,{-1,1},colors,pointSize,binary);

        visualize:saveBatchImagesWithKeypointsSensitive(batch_inputs_view,outputs_view:transpose(2,3),{saveImage,'_org_nokp.jpg'},nil,{-1,1},colors,-1,binary);
    end

    return loss,loss_all;
end

function forward(td,net,inputs,batch_targets,saveImage,euclideanLoss)
    local batch_inputs_view;
    if saveImage then
        batch_inputs_view=inputs:double():clone();
    end  
    
    local midoutputs=net:get(1):forward(inputs);

    local midoutputs_view;
    if saveImage then
        midoutputs_view=midoutputs:double():clone();
    end

    midoutputs=tps_helper:switchMeans(midoutputs,td.params.imagenet_mean,td.mean_im,td.std_im)

    local outputs=net:get(2):forward(midoutputs);
    
    local tps_layer= net:get(1):get(1):get(2);
    tps_layer=tps_layer:get(#tps_layer);
    

    local t_pts=tps_helper:getPointsOriginalImage(outputs,tps_layer.output)

    if saveImage then
        local outputs_view=outputs:view(outputs:size(1),outputs:size(2)/2,2):clone();
        local t_pts_view=t_pts:view(t_pts:size(1),t_pts:size(2)/2,2):clone();
        local colors={{0,255,0}};
        local pointSize=10;  
        t_pts_view=t_pts_view:transpose(2,3)
        for im_num=1,t_pts:size(1) do 
            local out_file_gt=saveImage..im_num..'_gt_pts.npy';
            local out_file_pred=saveImage..im_num..'_pred_pts.npy';

            local pred_output=t_pts[im_num]:clone():double();
            local gt_output=batch_targets[im_num]:clone():double();
            pred_output=pred_output:view(pred_output:size(1)/2,2);
            npy4th.savenpy(out_file_gt,gt_output);
            npy4th.savenpy(out_file_pred,pred_output);

        end

        local binary=batch_targets[{{},{},3}]:clone();

        visualize:saveBatchImagesWithKeypointsSensitive(batch_inputs_view,t_pts_view,{saveImage,'_org.jpg'},td.params.imagenet_mean,{-1,1},colors,pointSize,binary);

        visualize:saveBatchImagesWithKeypointsSensitive(batch_inputs_view,batch_targets[{{},{},{1,2}}]:transpose(2,3),{saveImage,'_gt.jpg'},nil,{-1,1},colors,pointSize,binary);

        visualize:saveBatchImagesWithKeypointsSensitive(midoutputs_view,outputs_view:transpose(2,3),{saveImage,'_warp.jpg'},td.params.imagenet_mean,{-1,1},colors,pointSize,binary);

        visualize:saveBatchImagesWithKeypointsSensitive(batch_inputs_view,t_pts_view,{saveImage,'_org_nokp.jpg'},nil,{-1,1},colors,-1,binary);

        visualize:saveBatchImagesWithKeypointsSensitive(midoutputs_view,outputs_view:transpose(2,3),{saveImage,'_warp_nokp.jpg'},nil,{-1,1},colors,-1,binary);
    end

    local loss;
    local loss_all;
    
    if euclideanLoss then
        loss, loss_all = loss_helper:getLoss_Euclidean(t_pts,batch_targets);
    else
        loss, loss_all = loss_helper:getLoss_RCNN(t_pts,batch_targets);
    end

    return loss,loss_all,midoutputs,inputs;
end

function test(params)
    if params.limit<0 then
        params.limit=nil;
    end
    local val_data_path= params.val_data_path
    
    local out_dir_images=params.out_dir_images;
    paths.mkdir(out_dir_images);
    local out_file_loss_val=paths.concat(out_dir_images,'loss_final_val.npy');
    local out_file_loss_val_ind=paths.concat(out_dir_images,'loss_final_val_ind.npy');
    local out_file_log=paths.concat(out_dir_images,'log_test.txt');
    local logger=torch.DiskFile(out_file_log,'w');
    
    logger:writeString(dump.tostring(params)..'\n');
    print (params);

    cutorch.setDevice(params.gpu);
    logger:writeString(dump.tostring('loading network')..'\n');
    print ('loading network');

    local net=torch.load(params.model_path);
    
    logger:writeString(dump.tostring('done loading network')..'\n');
    print ('done loading network');
    print (net);

    logger:writeString(dump.tostring('moving to GPU')..'\n');
    print ('moving to GPU');
    
    local net = net:cuda();
    net:evaluate();

    logger:writeString(dump.tostring('done')..'\n');
    print ('done');

    local data_params={file_path=val_data_path,
                    batch_size=params.batchSize,
                    mean_file=params.mean_im_path,
                    std_file=params.std_im_path,
                    augmentation=false,
                    limit=params.limit,
                    input_size={224,224},
                    imagenet_mean=true};

    if params.face then
        data_params.imagenet_mean=false;
    end
    
    local td=data_animal(data_params);
   
    local val_losses = {};
    local val_losses_iter = {};

    local val_losses_ind={};

    for i=1,params.iterations do

            td:getTrainingData();

            td.training_set.data=td.training_set.data:cuda();
            td.training_set.label=td.training_set.label:cuda();

            local batch_inputs=td.training_set.data;
            local batch_targets=td.training_set.label;
            
            local loss,loss_all;
            local saveImage=paths.concat(out_dir_images,i..'_')
            local colors={{0,255,0}};
            local pointSize=10;
            
            if params.face then
                loss, loss_all = forward_noWarp(td,net,batch_inputs,batch_targets,saveImage,true);
            else
                loss,loss_all = forward(td,net,batch_inputs,batch_targets,saveImage,true)
            end

            for idx_ind=1,loss_all:size(1) do
                val_losses_ind[#val_losses_ind+1]=loss_all[idx_ind];
            end
            
            val_losses[#val_losses+1]=loss;
            val_losses_iter[#val_losses_iter+1]=i;

            disp_str=string.format("minibatches processed: %6s, val loss = %6.6f", i, val_losses[#val_losses])
            logger:writeString(dump.tostring(disp_str)..'\n');
            print(disp_str)

    end

    val_losses_ind=torch.Tensor(val_losses_ind);
    print (val_losses_ind:size())
    
    if val_losses_ind:size(1)>#td.lines_horse then
        val_losses_ind=val_losses_ind[{{1,#td.lines_horse}}];
    end
    
    print (val_losses_ind:size())
    
    print (params.model_path);
    
    disp_str=string.format("minibatches processed: all, val loss = %6.6f", torch.mean(val_losses_ind))
    logger:writeString(dump.tostring(disp_str)..'\n');
    
    print(disp_str)

    npy4th.savenpy(out_file_loss_val, torch.Tensor(val_losses))
    npy4th.savenpy(out_file_loss_val_ind, val_losses_ind)
end

cmd = torch.CmdLine()
cmd:text()
cmd:text('Train Full network')
cmd:text()
cmd:text('Options')
cmd:option('-mean_im_path','/home/SSD3/maheen-data/data_face_network/aflw_cvpr_224_mean.png');
cmd:option('-std_im_path','/home/SSD3/maheen-data/data_face_network/aflw_cvpr_224_std.png');
cmd:option('-limit',-1,'num of training data to read');
cmd:option('-batchSize',64,'batch size');

cmd:option('-mean_im_path','/home/SSD3/maheen-data/data_face_network/aflw_cvpr_224_mean.png');
cmd:option('-std_im_path','/home/SSD3/maheen-data/data_face_network/aflw_cvpr_224_std.png');

cmd:option('-val_data_path','/home/SSD3/maheen-data/horse_project/files_for_sheepCode/sheep_test_us_sheep_minloss.txt');

cmd:option('-model_path','/home/SSD3/maheen-data/horse_project/full_system_sheep_data_5kp/full_system/final/model_all_final.dat');
cmd:option('-gpu',1,'gpu to run the training on');

cmd:option('-iterations',2,'num of iterations to run');
cmd:option('-batchSize',50,'batch size');

cmd:option('-out_dir_images','/home/SSD3/maheen-data/horse_project/test_git/test_images');

cmd:option('-face',false);

params = cmd:parse(arg)
test(params)