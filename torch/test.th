require 'image'
npy4th = require 'npy4th'
require 'data_animal';
require 'cunn'
require 'cudnn'
require 'nn';
require 'optim'
require 'stn'
npy4th=require 'npy4th';
require 'torchx';
require 'gnuplot';
dump=require 'dump';
tps_helper=require 'tps_helper';
visualize=require 'visualize';
loss_helper=require 'loss_helper';
forward_helper=require 'forward_helper';

function test(params)
    if params.limit<0 then
        params.limit=nil;
    end
    local val_data_path= params.val_data_path
    
    local out_dir_images=params.out_dir_images;
    paths.mkdir(out_dir_images);
    local out_file_loss_val=paths.concat(out_dir_images,'loss_final_val.npy');
    local out_file_loss_val_ind=paths.concat(out_dir_images,'loss_final_val_ind.npy');
    local out_file_log=paths.concat(out_dir_images,'log_test.txt');
    local logger=torch.DiskFile(out_file_log,'w');
    
    logger:writeString(dump.tostring(params)..'\n');
    print (params);

    cutorch.setDevice(params.gpu);
    logger:writeString(dump.tostring('loading network')..'\n');
    print ('loading network');

    local net=torch.load(params.model_path);
    
    logger:writeString(dump.tostring('done loading network')..'\n');
    print ('done loading network');
    print (net);

    logger:writeString(dump.tostring('moving to GPU')..'\n');
    print ('moving to GPU');
    
    local net = net:cuda();
    net:evaluate();

    logger:writeString(dump.tostring('done')..'\n');
    print ('done');

    local data_params={file_path=val_data_path,
                    batch_size=params.batchSize,
                    mean_file=params.mean_im_path,
                    std_file=params.std_im_path,
                    augmentation=false,
                    limit=params.limit,
                    input_size={224,224},
                    imagenet_mean=true};

    if params.face then
        if params.bgr then
            data_params.bgr=true;   
        else
            data_params.imagenet_mean=false;
        end
    end
    
    local td=data_animal(data_params);
   
    local val_losses = {};
    local val_losses_iter = {};

    local val_losses_ind={};

    for i=1,params.iterations do

            td:getTrainingData();

            td.training_set.data=td.training_set.data:cuda();
            td.training_set.label=td.training_set.label:cuda();

            local batch_inputs=td.training_set.data;
            local batch_targets=td.training_set.label;
            
            local loss,loss_all;
            local saveImage=paths.concat(out_dir_images,i..'_')
            local colors={{0,255,0}};
            local pointSize=10;
            
            if params.face then
                print 'nowarp';
                loss, loss_all = forward_helper:forward_noWarp(td,net,batch_inputs,batch_targets,saveImage,true);
            else
                loss,loss_all = forward_helper:forward(td,net,batch_inputs,batch_targets,saveImage,true)
            end

            for idx_ind=1,loss_all:size(1) do
                val_losses_ind[#val_losses_ind+1]=loss_all[idx_ind];
            end
            
            val_losses[#val_losses+1]=loss;
            val_losses_iter[#val_losses_iter+1]=i;

            disp_str=string.format("minibatches processed: %6s, val loss = %6.6f", i, val_losses[#val_losses])
            logger:writeString(dump.tostring(disp_str)..'\n');
            print(disp_str)

    end

    val_losses_ind=torch.Tensor(val_losses_ind);
    print (val_losses_ind:size())
    
    if val_losses_ind:size(1)>#td.lines_horse then
        val_losses_ind=val_losses_ind[{{1,#td.lines_horse}}];
    end
    
    print (val_losses_ind:size())
    
    print (params.model_path);
    
    disp_str=string.format("minibatches processed: all, val loss = %6.6f", torch.mean(val_losses_ind))
    logger:writeString(dump.tostring(disp_str)..'\n');
    
    print(disp_str)

    npy4th.savenpy(out_file_loss_val, torch.Tensor(val_losses))
    npy4th.savenpy(out_file_loss_val_ind, val_losses_ind)
end

cmd = torch.CmdLine()
cmd:text()
cmd:text('Test Full network')
cmd:text()
cmd:text('Options')
cmd:option('-mean_im_path','../data/aflw_cvpr_224_mean.png','mean image for image preprocessing for keypoint network training');
cmd:option('-std_im_path','../data/aflw_cvpr_224_std.png','std image for image preprocessing for keypoint network training');
cmd:option('-limit',-1,'num of test data to read. negative means all');

cmd:option('-val_data_path','../data/test_minloss_horse_old.txt','validation data file path');
cmd:option('-model_path','temp');
    -- '/home/SSD3/maheen-data/horse_project/cvpr_rebuttal/full_model_bgr/final/model_all_final.dat');
    -- '/home/SSD3/maheen-data/horse_project/cvpr_rebuttal/alexnet_fc_scratch_ft/final/model_all_final.dat');
cmd:option('-out_dir_images','temp');
    -- '/home/SSD3/maheen-data/horse_project/cvpr_rebuttal/full_model_bgr/test_images');
    -- '/home/SSD3/maheen-data/horse_project/cvpr_rebuttal/alexnet_fc_scratch_ft/test_images');


cmd:option('-gpu',1,'gpu to run the training on');
cmd:option('-bgr',false);

cmd:option('-iterations',2,'num of iterations to run');
cmd:option('-batchSize',100,'batch size');


cmd:option('-face',false,'true if testing a model with no warping network');

params = cmd:parse(arg)
test(params)